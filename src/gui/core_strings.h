// This file is generated by translator.py
// It contains all strings that need translation from the
// core of Twinkle.

#define _ZAP(s)

// userintf.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Anonymous"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Warning:"))

// log.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to create log file %1 ."))

// call_history.cpp
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "local user"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "remote user"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "failure"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "unknown"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "in"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "out"))
_ZAP(QT_TRANSLATE_NOOP("CoreCallHistory", "unknown"))

// sender.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Excessive number of socket errors."))

// sys_settings.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Built with support for:"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Contributions:"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "This software contains the following software from 3rd parties:"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "* GSM codec from Jutta Degener and Carsten Bormann, University of Berlin"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "* G.711/G.726 codecs from Sun Microsystems (public domain)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "* iLBC implementation from RFC 3951 (www.ilbcfreeware.org)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "* Parts of the STUN project at http://sourceforge.net/projects/stun"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "* Parts of libsrv at http://libsrv.sourceforge.net/"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "For RTP the following dynamic libraries are linked:"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Translated to english by <your name>"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Directory %1 does not exist."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "%1 is not set to your home directory."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Directory %1 (%2) does not exist."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot create directory %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot create directory %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to create file %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to write data to file %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot create %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "%1 is already running.\nLock file %2 already exists."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot lock %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file for reading: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "File system error while reading file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Syntax error in file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to backup %1 to %2"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file for writing: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "File system error while writing file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "unknown name (device is busy)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Default device"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot access the ring tone device (%1)."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot access the speaker (%1)."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot access the microphone (%1)."))

// listener.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Excessive number of socket errors."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot receive incoming TCP connections."))

// phone.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Call transfer - %1"))

// audio_session.cpp
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to open sound card"))
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to open sound card"))
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to open sound card"))
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to create a UDP socket (RTP) on port %1"))
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to create audio receiver thread."))
_ZAP(QT_TRANSLATE_NOOP("CoreAudio", "Failed to create audio transmitter thread."))

// audio_device.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Sound card cannot be set to full duplex."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot set buffer size on sound card."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Sound card cannot be set to %1 channels."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Sound card cannot be set to %1 channels."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot set sound card to 16 bits recording."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot set sound card to 16 bits playing."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot set sound card sample rate to %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Opening ALSA driver failed"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open ALSA driver for PCM playback"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open ALSA driver for PCM capture"))

// msg_session.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to send message."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Failed to send message."))

// stun_transaction.cpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot resolve STUN server: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "You are behind a symmetric NAT.\nSTUN will not work.\nConfigure a public IP address in the user profile\nand create the following static bindings (UDP) in your NAT."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "public IP: %1 --> private IP: %2 (SIP signaling)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "public IP: %1-%2 --> private IP: %3-%4 (RTP/RTCP)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot reach the STUN server: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "If you are behind a firewall then you need to open the following UDP ports."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Port %1 (SIP signaling)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Ports %1-%2 (RTP/RTCP)"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "NAT type discovery via STUN failed."))

// record_file.hpp
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file for reading: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "File system error while reading file %1 ."))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "Cannot open file for writing: %1"))
_ZAP(QT_TRANSLATE_NOOP("TwinkleCore", "File system error while writing file %1 ."))

